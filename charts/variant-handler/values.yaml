# This file contains the defaults for all optional, overridable values

serviceMonitor:
  # -- Frequency at which Prometheus metrics will be collected from your service
  interval: 10s
  # -- Maximum wait duration for Prometheus metrics response from your service
  scrapeTimeout: 10s

service:
  # -- Port for internal services to access your API
  port: 80
  # -- Port on your container that exposes your HTTP API
  targetPort: 9000
  # -- Optional port which serves a health check endpoint at `/health`
  # Defaults to value of `service.targetPort` if not defined.
  healthCheckPort:
  # -- Optional port which serves prometheus metrics endpoint at `/metrics`
  # Defaults to value of `service.targetPort` if not defined.
  metricsPort:
  # Health check URI, This will be used in probes to check container status
  healthCheckPath: /health

serviceAccount:
  # -- (string) Optional ARN of the IAM role to be assumed by your application. 
  # If your API requires access to any AWS services, a role should be created in AWS IAM.
  # This role should have an inline policy that describes the permissions your API needs (connect to RDS, publish to an SNS topic, read from an SQS queue, etc.).
  roleArn:

podSecurityContext:
    fsGroup: 65534

securityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1000
  # capabilities:
  #   drop:
  #   - ALL
  # allowPrivilegeEscalation: false
  # readOnlyRootFilesystem: true

replicaCount: 1

autoscaling:
  # Flag to trigger HPA, Allowd values true or false
  enabled: false
  # Minimum replicas of pod
  minReplicas: 1
  # Maximum replicas of pod
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage:

deployment:
  image:
    # -- (string) The full URL of the image to be deployed containing the tag
    tag: "tag"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1
      memory: 768Mi
    requests:
      cpu: .1
      memory: 384Mi
  args: []
  podAnnotations: {}

# -- (string) Value for a [label](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) named `revision` 
# that will be applied to all objects created by a specific chart installation.
# Strongly encouraged that this value corresponds to 1 of: Octopus package version, short-SHA of the commit, Octopus release version
revision: abc

# -- A list of secrets to configure to make available to your API.
# Create your secret in AWS Secrets Manager as plain text.
# Full contents of this secret will be mounted as a file your application can read.
# See [secrets](#secrets) for more details.
awsSecrets: []
  # - name: testKey

secretVars: []
  # foo: bar
configVars: []
  # bar: foo

#Node labels for pod assignment
#ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}
#Tolerations for pod assignment
#ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# Affinity for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# -- See [Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) docs
readinessProbe: {}

# -- See [Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) docs
livenessProbe: {}